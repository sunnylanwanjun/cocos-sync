

  // GGX / Trowbridge-Reitz
  // [Walter et al. 2007, "Microfacet models for refraction through rough surfaces"]
  float D_GGX( float a2, float NoH )
  {
    float d = ( NoH * a2 - NoH ) * NoH + 1.;	// 2 mad
    return a2 / ( PI*d*d );					// 4 mul, 1 rcp
  }
  // Appoximation of joint Smith term for GGX
  // [Heitz 2014, "Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs"]
  float Vis_SmithJointApprox( float a2, float NoV, float NoL )
  {
    float a = sqrt(a2);
    float Vis_SmithV = NoL * ( NoV * ( 1. - a ) + a );
    float Vis_SmithL = NoV * ( NoL * ( 1. - a ) + a );
    return 0.5 / ( Vis_SmithV + Vis_SmithL );
  }
  // [Schlick 1994, "An Inexpensive BRDF Model for Physically-Based Rendering"]
  vec3 F_Schlick( vec3 SpecularColor, float VoH )
  {
    float Fc = pow( 1. - VoH, 5. );					// 1 sub, 3 mul
    //return Fc + (1 - Fc) * SpecularColor;		// 1 add, 3 mad
    
    // Anything less than 2% is physically impossible and is instead considered to be shadowing
    return saturate( 50.0 * SpecularColor.g ) * Fc + (1. - Fc) * SpecularColor;
    
  }

  vec3 SpecularGGX(vec3 SpecularColor, float Roughness, float NoH, float VoH, float NoV, float NoL) {
    float a2 = pow( Roughness, 4. );
    float Energy = 1.;//EnergyNormalization( a2, VoH, AreaLight );
    
    // Generalized microfacet specular
    float D = D_GGX( a2, NoH ) * Energy;
    float Vis = Vis_SmithJointApprox( a2, NoV, NoL );
    vec3 F = F_Schlick( SpecularColor, VoH );

    return (D * Vis) * F;
  }
  