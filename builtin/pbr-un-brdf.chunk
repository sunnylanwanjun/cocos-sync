#include <./pbr-lighting>

vec3 FresnelTerm (vec3 F0, float cosA)
{
    float t = pow(1. - cosA, 5.);   // ala Schlick interpoliation
    return F0 + (1.- F0) * t;
}
vec3 FresnelLerp (vec3 F0, vec3 F90, float cosA)
{
    float t = pow(1. - cosA, 5.);   // ala Schlick interpoliation
    return mix (F0, F90, t);
}

// Note: Disney diffuse must be multiply by diffuseAlbedo / PI. This is done outside of this function.
float DisneyDiffuse(float NdotV, float NdotL, float LdotH, float perceptualRoughness)
{
  float fd90 = 0.5 + 2. * LdotH * LdotH * perceptualRoughness;
  // Two schlick fresnel term
  float lightScatter   = (1. + (fd90 - 1.) * pow(1. - NdotL, 5.));
  float viewScatter    = (1. + (fd90 - 1.) * pow(1. - NdotV, 5.));

  return lightScatter * viewScatter;
}

// Ref: http://jcgt.org/published/0003/02/03/paper.pdf
float SmithJointGGXVisibilityTerm (float NdotL, float NdotV, float roughness)
{
#if 0
    // Original formulation:
    //  lambda_v    = (-1 + sqrt(a2 * (1 - NdotL2) / NdotL2 + 1)) * 0.5;
    //  lambda_l    = (-1 + sqrt(a2 * (1 - NdotV2) / NdotV2 + 1)) * 0.5;
    //  G           = 1 / (1 + lambda_v + lambda_l);

    // Reorder code to be more optimal
    half a          = roughness;
    half a2         = a * a;

    half lambdaV    = NdotL * sqrt((-NdotV * a2 + NdotV) * NdotV + a2);
    half lambdaL    = NdotV * sqrt((-NdotL * a2 + NdotL) * NdotL + a2);

    // Simplify visibility term: (2.0f * NdotL * NdotV) /  ((4.0f * NdotL * NdotV) * (lambda_v + lambda_l + 1e-5f));
    return 0.5 / (lambdaV + lambdaL + 1e-5f);  // This function is not intended to be running on Mobile,
                                                // therefore epsilon is smaller than can be represented by half
#else
    // Approximation of the above formulation (simplify the sqrt, not mathematically correct but close enough)
    float a = roughness;
    float lambdaV = NdotL * (NdotV * (1. - a) + a);
    float lambdaL = NdotV * (NdotL * (1. - a) + a);

// #if defined(SHADER_API_SWITCH)
//     return 0.5 / (lambdaV + lambdaL + 1e-4); // work-around against hlslcc rounding error
// #else
    return 0.5 / (lambdaV + lambdaL + 1e-5);
// #endif

#endif
}

float GGXTerm (float NdotH, float roughness)
{
  float a2 = roughness * roughness;
  float d = (NdotH * a2 - NdotH) * NdotH + 1.0; // 2 mad
  return a2 / (d * d + 1e-7) / PI; // This function is not intended to be running on Mobile,
                                   // therefore epsilon is smaller than what can be represented by half
}

vec3 BRDF (StandardSurface s, GI gi) {
  GIInput giInput = gi.giInput;
  Light light = gi.light;
  IndirectLight indirect = gi.indirect;

  float NH = max(dot(giInput.normal, giInput.halfDir), 0.0);
  float VH = max(dot(giInput.view, giInput.halfDir), 0.0);
  float NV = max(abs(dot(giInput.normal, giInput.view)), 0.001);
  float NL = max(dot(giInput.normal, light.direction), 0.001);
  float LH = max(dot(light.direction, giInput.view), 0.001);

  float perceptualRoughness = s.roughness;
  
  vec3 diffColor = giInput.diffuseColor;
  vec3 specColor = giInput.specColor;

  // Diffuse term
  float diffuseTerm = DisneyDiffuse(NV, NL, LH, perceptualRoughness) * NL;

  // Specular term
  float roughness = max(perceptualRoughness * perceptualRoughness, 0.02);

  float V = SmithJointGGXVisibilityTerm(NL, NV, roughness);
  float D = GGXTerm(NH, roughness);

  float specularTerm = V * D; // Torrance-Sparrow model, Fresnel is applied later
  
  // specularTerm * nl can be NaN on Metal in some cases, use max() to make sure it's a sane value
  specularTerm = max(0., specularTerm * NL);

  // surfaceReduction = Int D(NdotH) * NdotH * Id(NdotL>0) dH = 1/(roughness^2+1)
  float surfaceReduction = 1.0 / (roughness*roughness + 1.0);           // fade \in [0.5;1]

  // To provide true Lambert lighting, we need to be able to kill specular completely.
  specularTerm *= (specColor.x != 0. || specColor.y != 0. || specColor.z != 0.) ? 1.0 : 0.0;

  float smoothness = 1. - perceptualRoughness;
  float grazingTerm = clamp(smoothness + (1.- giInput.oneMinusReflectivity), 0., 1.);

  vec3 color =  diffColor * (indirect.diffuse + light.color * diffuseTerm)
    + specularTerm * light.color * FresnelTerm (specColor, LH)
    + surfaceReduction * indirect.specular * FresnelLerp (specColor, vec3(grazingTerm), NV);

  return color;
}
